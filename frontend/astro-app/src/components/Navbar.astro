---
const platformName = "DevLevelUp";
const categories = [
  { name: "Frontend", href: "/courses/frontend" },
  { name: "Backend", href: "/courses/backend" },
  { name: "Mobile Development", href: "/courses/mobile-development" },
  { name: "Data Science & AI", href: "/courses/data-science-ai" },
  { name: "DevOps & Cloud", href: "/courses/devops-cloud" },
  { name: "Cybersecurity", href: "/courses/cybersecurity" },
  { name: "Game Development", href: "/courses/game-development" }
];
---

<nav class="p-4 lg:px-6 flex justify-between items-center shadow-sm bg-white relative">
  <!-- Logo -->
  <div class="flex items-center gap-2 z-50">
    <img src="/logo.svg" width={32} height={32} alt="Logo" class="w-6 h-6 sm:w-8 sm:h-8" />
    <span class="text-gray-800 font-bold text-lg sm:text-xl cursor-pointer" onclick="window.location.href='/'">
      {platformName}
    </span>
  </div>

  <!-- Desktop Navigation -->
  <div class="hidden lg:flex items-center gap-6 text-gray-700">
    <a href="/" class="hover:text-orange-500 transition-colors duration-200">Home</a>
    <a href="/about" class="hover:text-orange-500 transition-colors duration-200">About</a>

    <!-- Desktop Dropdown -->
    <div class="relative" id="desktop-dropdown">
      <button class="flex items-center gap-1 hover:text-orange-500 transition-colors duration-200">
        Categories
        <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 transition-transform duration-200" fill="none"
          viewBox="0 0 24 24" stroke="currentColor" id="desktop-dropdown-arrow">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M19 9l-7 7-7-7" />
        </svg>
      </button>

      <div class="absolute left-0 top-full mt-2 bg-white shadow-lg rounded-lg border border-gray-200 hidden z-50 min-w-max"
        id="desktop-dropdown-container">
        <ul class="py-2 w-56">
          {categories.map(cat => (
            <li>
              <a href={cat.href} class="block px-4 py-3 hover:bg-orange-50 hover:text-orange-500 transition-colors duration-200">
                {cat.name}
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  </div>

  <!-- Desktop CTA -->
  <div class="hidden lg:block">
    <a onclick="window.location.href='https://devlevelup-dashboard.vercel.app/signup'"

      class="bg-orange-500 cursor-pointer text-white px-6 py-2 rounded-2xl hover:bg-orange-600 transition-colors duration-200 font-medium">
      Sign Up
    </a>
  </div>

  <!-- Mobile Menu Button -->
  <button class="lg:hidden z-50 flex flex-col gap-1 w-6 h-6 justify-center items-center" id="mobile-menu-btn">
    <span class="w-5 h-0.5 bg-gray-800 transition-all duration-300" id="line1"></span>
    <span class="w-5 h-0.5 bg-gray-800 transition-all duration-300" id="line2"></span>
    <span class="w-5 h-0.5 bg-gray-800 transition-all duration-300" id="line3"></span>
  </button>

  <!-- Mobile Menu Overlay -->
  <div class="lg:hidden fixed inset-0 bg-black bg-opacity-50 z-30 hidden" id="mobile-overlay"></div>

  <!-- Mobile Menu -->
  <div class="lg:hidden fixed top-0 right-0 h-full w-80 max-w-sm bg-white shadow-xl z-50 transform translate-x-full transition-transform duration-300" id="mobile-menu">
    <div class="p-6 pt-20">
      <!-- Mobile Navigation Links -->
      <div class="space-y-4 mb-8">
        <a href="/" class="block text-lg text-gray-700 hover:text-orange-500 transition-colors duration-200 py-2">Home</a>
        <a href="/about" class="block text-lg text-gray-700 hover:text-orange-500 transition-colors duration-200 py-2">About</a>
        
        <!-- Mobile Categories -->
        <div class="border-t pt-4">
          <button class="flex items-center justify-between w-full text-lg text-gray-700 hover:text-orange-500 transition-colors duration-200 py-2" id="mobile-categories-btn">
            Categories
            <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 transition-transform duration-200" fill="none"
              viewBox="0 0 24 24" stroke="currentColor" id="mobile-categories-arrow">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          
          <div class="hidden mt-2 space-y-2 pl-4" id="mobile-categories-list">
            {categories.map(cat => (
              <a href={cat.href} class="block text-gray-600 hover:text-orange-500 transition-colors duration-200 py-2">
                {cat.name}
              </a>
            ))}
          </div>
        </div>
      </div>

      <!-- Mobile CTA -->
      <div class="border-t pt-6">
        <a onclick="window.location.href='https://devlevelup-dashboard.vercel.app/signup'"
          class="block w-full text-center bg-orange-500 cursor-pointer text-white px-6 py-3 rounded-2xl hover:bg-orange-600 transition-colors duration-200 font-medium">
          Sign Up
        </a>
      </div>
    </div>
  </div>
</nav>

<script>
  // Desktop dropdown functionality
  const desktopDropdown = document.getElementById("desktop-dropdown");
  const desktopDropdownContainer = document.getElementById("desktop-dropdown-container");
  const desktopDropdownArrow = document.getElementById("desktop-dropdown-arrow");

  if (desktopDropdown && desktopDropdownContainer) {
    let timeout;

    desktopDropdown.addEventListener("mouseenter", () => {
      clearTimeout(timeout);
      desktopDropdownContainer.classList.remove("hidden");
      desktopDropdownArrow.style.transform = "rotate(180deg)";
    });

    desktopDropdown.addEventListener("mouseleave", () => {
      timeout = setTimeout(() => {
        desktopDropdownContainer.classList.add("hidden");
        desktopDropdownArrow.style.transform = "rotate(0deg)";
      }, 150);
    });

    desktopDropdownContainer.addEventListener("mouseenter", () => {
      clearTimeout(timeout);
    });

    desktopDropdownContainer.addEventListener("mouseleave", () => {
      timeout = setTimeout(() => {
        desktopDropdownContainer.classList.add("hidden");
        desktopDropdownArrow.style.transform = "rotate(0deg)";
      }, 150);
    });
  }

  // Mobile menu functionality
  const mobileMenuBtn = document.getElementById("mobile-menu-btn");
  const mobileMenu = document.getElementById("mobile-menu");
  const mobileOverlay = document.getElementById("mobile-overlay");
  const line1 = document.getElementById("line1");
  const line2 = document.getElementById("line2");
  const line3 = document.getElementById("line3");

  let isMobileMenuOpen = false;

  function toggleMobileMenu() {
    isMobileMenuOpen = !isMobileMenuOpen;
    
    if (isMobileMenuOpen) {
      mobileMenu.classList.remove("translate-x-full");
      mobileOverlay.classList.remove("hidden");
      document.body.style.overflow = "hidden";
      
      // Animate hamburger to X
      line1.style.transform = "rotate(45deg) translateY(4px)";
      line2.style.opacity = "0";
      line3.style.transform = "rotate(-45deg) translateY(-4px)";
    } else {
      mobileMenu.classList.add("translate-x-full");
      mobileOverlay.classList.add("hidden");
      document.body.style.overflow = "auto";
      
      // Animate X back to hamburger
      line1.style.transform = "rotate(0deg) translateY(0px)";
      line2.style.opacity = "1";
      line3.style.transform = "rotate(0deg) translateY(0px)";
    }
  }

  mobileMenuBtn?.addEventListener("click", toggleMobileMenu);
  mobileOverlay?.addEventListener("click", toggleMobileMenu);

  // Mobile categories dropdown
  const mobileCategoriesBtn = document.getElementById("mobile-categories-btn");
  const mobileCategoriesList = document.getElementById("mobile-categories-list");
  const mobileCategoriesArrow = document.getElementById("mobile-categories-arrow");

  let isMobileCategoriesOpen = false;

  mobileCategoriesBtn?.addEventListener("click", () => {
    isMobileCategoriesOpen = !isMobileCategoriesOpen;
    
    if (isMobileCategoriesOpen) {
      mobileCategoriesList.classList.remove("hidden");
      mobileCategoriesArrow.style.transform = "rotate(180deg)";
    } else {
      mobileCategoriesList.classList.add("hidden");
      mobileCategoriesArrow.style.transform = "rotate(0deg)";
    }
  });

  // Close mobile menu when clicking on links
  const mobileMenuLinks = document.querySelectorAll('#mobile-menu a[href]');
  mobileMenuLinks.forEach(link => {
    link.addEventListener('click', () => {
      if (isMobileMenuOpen) {
        toggleMobileMenu();
      }
    });
  });

  // Handle window resize
  window.addEventListener('resize', () => {
    if (window.innerWidth >= 1024 && isMobileMenuOpen) {
      toggleMobileMenu();
    }
  });
</script>